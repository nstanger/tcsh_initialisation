# Shell functions to start and stop VPNs.

declare -Ax vpn_execs vpn_args

vpn_execs=( \
    [home]="$BREW_PREFIX/sbin/openvpn" \
    [work]="$BREW_PREFIX/bin/openconnect" \
)

vpn_args=( \
    [home]="--config ~/.vpn/stanger.org.nz.ovpn" \
    [work]="--config ~/.vpn/otago.ac.nz.vpn vpn.staff.otago.ac.nz < ~/.vpn/otago.ac.nz.auth > /dev/null 2>&1" \
)

function vpn-up() {
    local vpns=($@)
    [[ $#vpns -eq 0 ]] && vpns+="work"
    for v in ${(k)vpns}; do
        if [[ -z "$vpn_execs[$v]" ]]; then
            printf '%s: warning: ignoring unknown "%s" VPN\n' $funcstack[1] $v
        else
            local program=$(basename $vpn_execs[$v])
            if [[ $(pgrep $program) ]]; then
                printf '%s: warning: ignoring already running "%s" VPN\n' $funcstack[1] $v
            else
                printf '%s: starting "%s" VPN\n' $funcstack[1] $v
                eval sudo $vpn_execs[$v] $vpn_args[$v]
            fi
        fi
    done
}

function vpn-down() {
    local vpns=($@)
    [[ $#vpns -eq 0 ]] && vpns=${(k)vpn_execs}
    for v in ${=vpns}; do
        if [[ -z "$vpn_execs[$v]" ]]; then
            printf '%s: warning: ignoring unknown "%s" VPN\n' $funcstack[1] $v
        else
            local program=$(basename $vpn_execs[$v])
            if [[ $(pgrep "$program") ]]; then
                printf '%s: shutting down "%s" VPN\n' $funcstack[1] $v
                sudo pkill -2 $program > /dev/null 2>&1
                while [[ $(pgrep "$program") ]]; do
                    # Loop until the program is definitely terminated, otherwise
                    # the process tracking may get out of sync and the prompt 
                    # status item won't get updated. Technical danger of an
                    # endless loop if the vpn process never terminates, but
                    # this can be resolved with ctrl-c and a manual `kill -9`
                    # of the corresponding process.
                done
            fi
        fi
    done
}
